name: Deploy Architecture Diagrams to GitHub Pages

on:
  # Trigger on pushes to main branch
  push:
    branches: ["main"]
  
  # Trigger on pull requests to main branch
  pull_request:
    branches: ["main"]
  
  # Allow manual trigger from GitHub UI
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and validate the website
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 📦 Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 📦 Install dependencies
        run: |
          # Check if package.json exists, if not create it
          if [ ! -f package.json ]; then
            npm init -y
          fi
          
          # Install development dependencies
          npm install --save-dev html-validate htmlhint stylelint eslint prettier
          npm install --save-dev lighthouse-ci @lhci/cli
      
      - name: ✅ Validate HTML
        run: |
          echo "Validating HTML structure..."
          npx html-validate index.html || echo "HTML validation completed with warnings"
      
      - name: 🎨 Validate CSS
        run: |
          echo "Validating CSS files..."
          npx stylelint "css/*.css" --config-basedir . || echo "CSS validation completed"
      
      - name: 🔍 Validate JavaScript
        run: |
          echo "Validating JavaScript files..."
          npx eslint js/*.js --no-eslintrc --env browser,es6 --parserOptions '{"ecmaVersion": 2020}' || echo "JS validation completed"
      
      - name: 🔒 Security Check - Scan for secrets
        run: |
          echo "Scanning for potential secrets..."
          grep -r "password\|secret\|key\|token" --include="*.js" --include="*.html" --include="*.css" . || echo "No secrets found"
      
      - name: 📏 Check file sizes
        run: |
          echo "Checking file sizes for performance..."
          find . -name "*.js" -o -name "*.css" -o -name "*.html" | xargs ls -lh
          echo "Large files check:"
          find . -name "*.js" -o -name "*.css" -o -name "*.html" -size +100k | head -5 || echo "No large files found"
      
      - name: 🧹 Format check
        run: |
          echo "Checking code formatting..."
          npx prettier --check "**/*.{js,css,html,md}" || echo "Formatting check completed"
      
      - name: 🌐 Test Mermaid syntax
        run: |
          echo "Testing Mermaid diagram syntax..."
          if [ -f "scripts/validate-diagrams.js" ]; then
            echo "Running diagram validation script..."
            node scripts/validate-diagrams.js
          else
            echo "Validation script not found, performing basic checks..."
            # Count mermaid blocks in app.js
            DIAGRAM_COUNT=$(grep -c "mermaid:" js/app.js || echo "0")
            echo "Found $DIAGRAM_COUNT Mermaid diagram definitions"
            
            # Check for basic syntax issues
            if grep -q "graph\|flowchart\|sequenceDiagram" js/app.js; then
              echo "✅ Valid diagram types found"
            else
              echo "⚠️  Warning: No standard diagram types detected"
            fi
            
            echo "Mermaid syntax validation completed"
          fi
      
      - name: 📊 Generate build report
        run: |
          echo "# Build Report" > build-report.md
          echo "- **Build Date**: $(date)" >> build-report.md
          echo "- **Commit**: ${{ github.sha }}" >> build-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
          echo "- **HTML Files**: $(find . -name '*.html' | wc -l)" >> build-report.md
          echo "- **CSS Files**: $(find . -name '*.css' | wc -l)" >> build-report.md
          echo "- **JS Files**: $(find . -name '*.js' | wc -l)" >> build-report.md
          echo "- **Total Size**: $(du -sh . | cut -f1)" >> build-report.md
          cat build-report.md
      
      - name: 🚀 Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: 📦 Build site
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Preparing static files for deployment..."
          
          # Create deployment directory
          mkdir -p _site
          
          # Copy all necessary files
          cp index.html _site/
          cp -r css _site/
          cp -r js _site/
          cp -r assets _site/ 2>/dev/null || echo "No assets directory found"
          cp -r diagrams _site/ 2>/dev/null || echo "No diagrams directory found"
          cp README.md _site/
          
          # Generate sitemap
          CURRENT_DATE=$(date -u +%Y-%m-%d)
          cat > _site/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://your-username.github.io/architecture-diagrams/</loc>
              <lastmod>$CURRENT_DATE</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
          # Generate robots.txt
          cat > _site/robots.txt << 'EOF'
          User-agent: *
          Allow: /
          Sitemap: https://your-username.github.io/architecture-diagrams/sitemap.xml
          EOF
          
          # Optimize for production
          echo "Production build completed"
          ls -la _site/
      
      - name: 📤 Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  # Deploy to GitHub Pages
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 📧 Notify deployment success
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📅 Deployed at: $(date)"

  # Performance and accessibility testing
  lighthouse:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 📦 Install Lighthouse
        run: npm install -g lighthouse@11.0.0
      
      - name: ⏳ Wait for deployment to be ready
        run: |
          SITE_URL="${{ needs.deploy.outputs.page_url }}"
          if [ -z "$SITE_URL" ]; then
            SITE_URL="https://${{ github.repository_owner }}.github.io/architecture-diagrams"
          fi
          
          echo "Waiting for site to be ready: $SITE_URL"
          
          # Wait up to 5 minutes for the site to be available
          for i in {1..30}; do
            if curl -sSf "$SITE_URL" > /dev/null 2>&1; then
              echo "✅ Site is ready!"
              break
            fi
            echo "⏳ Waiting... (attempt $i/30)"
            sleep 10
          done
      
      - name: 🔍 Run Lighthouse CI
        run: |
          # Get the deployed URL from the deploy job output
          SITE_URL="${{ needs.deploy.outputs.page_url }}"
          if [ -z "$SITE_URL" ]; then
            SITE_URL="https://${{ github.repository_owner }}.github.io/architecture-diagrams"
          fi
          echo "Testing site: $SITE_URL"
          
          # Run Lighthouse on the deployed site
          npx lighthouse "$SITE_URL" \
            --output=json \
            --output=html \
            --output-path=./lighthouse-report \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --quiet
          
          # Check if report was generated
          if [ -f "./lighthouse-report.html" ]; then
            echo "📊 Lighthouse report generated successfully"
            
            # Extract basic scores (if json report exists)
            if [ -f "./lighthouse-report.json" ]; then
              echo "📈 Performance Scores:"
              node -e "
                const report = JSON.parse(require('fs').readFileSync('./lighthouse-report.json', 'utf8'));
                const categories = report.categories;
                Object.keys(categories).forEach(key => {
                  const score = Math.round(categories[key].score * 100);
                  console.log(\`  \${categories[key].title}: \${score}%\`);
                });
              " 2>/dev/null || echo "Could not parse scores"
            fi
          else
            echo "⚠️ Lighthouse report generation failed"
          fi
      
      - name: 📊 Performance Summary
        run: |
          echo "🏃‍♂️ Performance testing completed"
          echo "🔗 Check the Lighthouse report in the action logs"

  # Security scan
  security:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔒 Run security scan
        run: |
          echo "🔍 Running security checks..."
          
          # Check for common vulnerabilities
          echo "Checking for common security issues..."
          
          # Check for inline scripts (CSP violations)
          if grep -r "onclick\|javascript:" . --include="*.html"; then
            echo "⚠️  Warning: Inline JavaScript found"
          else
            echo "✅ No inline JavaScript found"
          fi
          
          # Check for HTTP links in HTTPS site
          if grep -r "http://" . --include="*.html" --include="*.js" --include="*.css"; then
            echo "⚠️  Warning: HTTP links found in HTTPS site"
          else
            echo "✅ No HTTP links found"
          fi
          
          echo "🔒 Security scan completed" 